Sub Check_Fitting_Initial(CONTROL As IRibbonControl) ''control As IRibbonControl
    On Error Resume Next
    Dim f As FileDialog
    Dim LibStrArr, SplitModel
    Dim TextString As String, s As String
    Dim NewFileName As String, LibName As String, LibNameArr
    Dim ModelName As String
    Dim isSubckt As Boolean
    isSubckt = False
    Dim ParamTableListSht As Worksheet
    
    Dim IsHaveSyn As Boolean
    
    Dim P As Long, col As Integer
    
    Bsht.Name = "FittingModel_IntialModel_Check"
    AllShtHide Bsht
    
    Bsht.Cells.Clear
        
'    PARAM.Visible = xlSheetVisible
'    PARAM.Activate
    
    Dim msg As VbMsgBoxResult
    msg = MsgBox("I'm Sure the parameter table list is the Newest version!", vbYesNo, "Parameter list update inquiry")
    If msg = vbNo Then
        MsgBox "You can use 【ReviseParamTableList】to update corressponding parameters list!"
        End
    End If
   
    Dim TF As New TxtFile
    TF.Arr = "Choose Your Model File/Files:"
    Dim FileArr
    FileArr = TF.Arr
    col = 1
    With Bsht
        For i = 1 To UBound(FileArr)
            TextString = ""
            TextString = FileArr(i, 1)
    '        If IsRegxMatch(TextString, "\.subckt[\s\S]*?\.model[\s\S]*?\.ends") Then
    '            SplitModel = getModelMatchArr(TextString, "\.subckt[\s\S]*?\.model[\s\S]*?\.ends")
    '        ElseIf IsRegxMatch(TextString, "\.model[\s\S]*?(?=\.model)") Then
    '            SplitModel = getModelMatchArr(TextString, "\.model[\s\S]*?(?=\.model)")
    '        End If
            LibStrArr = Split(TextString, Chr(10)) '''not chr(13)
            For j = 0 To UBound(LibStrArr)
                s = ""
                s = Trim(LCase(LibStrArr(j)))
                If Left(s, 7) = ".subckt" Then
                    isSubckt = True
                ElseIf Left(s, 6) = ".model" Then
                    
                    If P > 3 Then
                        SortingByParamType Bsht, .Cells(1, col - 3), Range(.Cells(3, col - 4), .Cells(P - 1, col - 2))
                        
                    End If
                    
                    If IsHaveSyn Then
                        .Cells(P + 1, col - 4) = "Synchronized_Paramters_Check"
                        RangeFormat2 .Cells(P + 1, col - 4)
                        SynParamCheck ModelParamArr, Bsht, P + 2, col - 4
                        IsHaveSyn = False
                        CountInitialAndFittingModelParamType Bsht, col - 4, Range(.Cells(3, col - 4), .Cells(8, col - 2))
                    End If
                    
                    
                    .Cells(1, col) = FileArr(i, 3)
                    .Cells(2, col) = s
                    RangeFormat2 .Cells(2, col)
                    
                    .Cells(1, col + 1) = "ParameterType"
                    .Cells(1, col + 2) = "DefectDescription"
                    RangeFormat Range(.Cells(1, col), .Cells(1, col + 2))
                    If IsRegxMatch(s, "\s[pn]mos\s?") Then
                        Set ParamTableListSht = MosParamList
                        ModelName = ""
                        ModelName = Split(OneBlank(s), " ")(1)
                        IsHaveSyn = True
                    ElseIf IsRegxMatch(s, "\spnp\s?") Then
                        Set ParamTableListSht = BjtPNPList
                    ElseIf IsRegxMatch(s, "\snpn\s?") Then
                        Set ParamTableListSht = BjtNPNList
                    ElseIf IsRegxMatch(s, "\sd\s?") Then ''''diode divide to Macro(with subckt) & Compact
                        If isSubckt Then
                            Set ParamTableListSht = MacroDiodeParamList
                        Else
                            Set ParamTableListSht = CompactDiodeParamList
                        End If
                    End If
                    
                    ParamTableListSht.Visible = xlSheetVisible
                    SetParam ParamTableListSht, ModelName
                    P = 3
                    col = col + 4
                   
                    Erase ModelParamArr '''clear array
                    
                ElseIf Left(s, 1) = "+" Then
                    CheckFittingModelParamWithTableList s, Bsht, P, col - 4, ParamTableListSht
                ElseIf Left(s, 5) = ".ends" Then
                    isSubckt = False
                End If
            Next
        Next
        SortingByParamType Bsht, .Cells(1, col - 3), Range(.Cells(3, col - 4), .Cells(P - 1, col - 2))
        
        If IsHaveSyn Then
            .Cells(P + 1, col - 4) = "Synchronized_Paramters_Check"
            RangeFormat2 .Cells(P + 1, col - 4)
            SynParamCheck ModelParamArr, Bsht, P + 2, col - 4
            IsHaveSyn = False
        End If
        
        CountInitialAndFittingModelParamType Bsht, col - 4, Range(.Cells(3, col - 4), .Cells(8, col - 2))
        
        .Columns.AutoFit
    End With
    'Bsht.[p1].Select
    'TextCompareByRow Bsht, 1, 2, 17
    'ListParamToCompare Bsht, 1, 2
    Bsht.Activate
    MsgBox "Check Done!", vbInformation

End Sub

Sub TextCompareByRow(WS As Worksheet, col1 As Long, col2 As Integer, iColor As Long)
'    With WS
'        r = .UsedRange.Rows.Count
'        For i = 1 To r
'            If .Cells(i, col1) <> .Cells(i, col2) Then
'                .Cells(i, col1).Interior.ColorIndex = iColor
'                .Cells(i, col2).Interior.ColorIndex = iColor
'                SetFontColor .Cells(i, col1), .Cells(i, col2), 4
'            End If
'        Next
'    End With
End Sub
Sub CheckFittingModelParamWithTableList(ParamStr As String, CompareReportSht As Worksheet, P As Long, col As Integer, ParamListSht As Worksheet)
    On Error Resume Next
    Dim Arr() As String
    Dim rng As Range
    Dim ParamValue
    Dim ParamName As String
    Dim ParamNameValue As String
    
    With CompareReportSht
        Arr = SplitParamsToArr(Right(ParamStr, Len(ParamStr) - 1))
        For j = 0 To UBound(Arr)
            If Arr(j) <> "" Then
                ParamNameValue = ""
                ParamNameValue = Trim(Arr(j))
                .Cells(P, col) = ParamNameValue
                ParamName = Trim(Split(Arr(j), "=")(0))
                ParamValue = none
                ParamValue = getParamValue(Arr(j))
                ModelParamArr(P - 2, 3) = ParamNameValue
                ModelParamArr(P - 2, 1) = ParamName
                ModelParamArr(P - 2, 2) = ParamValue
                CompareToTableList CompareReportSht, P, col, ParamName, ParamValue * 1
                P = P + 1
            End If
        Next
        
    End With

End Sub
        
Sub CompareToTableList(CompareReportSht As Worksheet, P As Long, col As Integer, sParam As String, ParamValue)
    On Error Resume Next
    With CompareReportSht
       
        '''If sParam = "deltawcv" Then MsgBox "1"
        Dim ParamValue1, ParamValue2
        Dim ParamArrOrder As Integer
        Dim ParamArrTableOrder As Integer

            ParamValue1 = 0
            ParamValue2 = 0
            Set rng = Nothing
            ParamArrOrder = 0
            ParamArrOrder = Application.WorksheetFunction.Match(sParam, Application.Index(ParamArr, , 1), 0)
            
            ParamArrTableOrder = 0
            ParamArrTableOrder = Application.WorksheetFunction.Match(sParam, Application.Index(ParamArrTable, , 1), 0)
            
            If ParamArrTableOrder > 1 And IsNumeric(ParamArrTable(ParamArrTableOrder, 3)) Then
                ParamArrTable(ParamArrTableOrder, 4) = "MODEL_HAVE"
            End If
            
            If ParamArrOrder = 0 Then
                ParamArrOrder = 1
            End If
            If ParamArrOrder > 1 Then
                ModelParamArr(P - 2, 4) = ParamArr(ParamArrOrder, 3) '''param type
                ModelParamArr(P - 2, 5) = ParamArr(ParamArrOrder, 7) '''param type
                If ParamValue * 1 <> ParamArr(ParamArrOrder, 7) * 1 Then
                    .Cells(P, col + 0).Interior.Color = ParamArr(ParamArrOrder, 2)
                    .Cells(P, col + 1) = ParamArr(ParamArrOrder, 3)
                    .Cells(P, col + 2) = "≠_INITIAL_MODEL"
                    If InStr(1, .Cells(P, col + 1), "fitting") > 0 Then
                        .Cells(P, col + 2) = "≠"
                    End If
                    
                    If ParamArr(ParamArrOrder, 7) = "na" Then
                        .Cells(P, col + 2) = "≠_TABLE_LIST"
                    End If
                    
                    If InStr(1, .Cells(P, col + 1), "fixed") > 0 Or InStr(1, .Cells(P, col + 1), "process") > 0 Then
                        .Cells(P, col + 2).Interior.ColorIndex = 3
                    End If
                Else
                    .Cells(P, col + 0).Interior.Color = ParamArr(ParamArrOrder, 2)
                    .Cells(P, col + 1) = ParamArr(ParamArrOrder, 3)
                    .Cells(P, col + 2) = "OK"
                End If
            Else
                ModelParamArr(P - 2, 4) = "NotInList" '''param type
                .Cells(P, col + 0).Interior.Color = ParamArr(ParamArrOrder, 2)
                .Cells(P, col + 1) = ParamArr(ParamArrOrder, 3)
                '.Cells(p, col + 2) = "OK"
            End If
            
            'If InStr(1, ParamArr(ParamArrOrder, 3), "fit") > 0 Then
                If IsNumeric(ParamArr(ParamArrOrder, 5)) Then
                    If ParamValue < ParamArr(ParamArrOrder, 5) * 1 Then
                        .Cells(P, col + 2) = "OverLowerBound"
                        .Cells(P, col + 2).Interior.ColorIndex = 3
                    End If
                End If
                
                If IsNumeric(ParamArr(ParamArrOrder, 6)) Then
                    If ParamValue > ParamArr(ParamArrOrder, 6) * 1 Then
                        .Cells(P, col + 2) = "OverUpperBound"
                        .Cells(P, col + 2).Interior.ColorIndex = 3
                    End If
                End If
            'End If


    End With
End Sub
Sub SortingByParamType(CompareReportSht As Worksheet, KeyRng As Range, rng As Range)
    With CompareReportSht
        
        .Sort.SortFields.Clear
        .Sort.SortFields.Add Key:=KeyRng, SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With .Sort
            .SetRange rng
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
    End With

End Sub

Sub CountInitialAndFittingModelParamType(CompareReportSht As Worksheet, col As Integer, rng As Range)
    On Error Resume Next
    Dim totalparamcnt_ini As Integer, totalparamcnt_fit As Integer
    Dim process_ini As Integer, process_fit As Integer
    Dim fitting_ini As Integer, fitting_fit As Integer
    Dim fixed_ini As Integer, fixed_fit As Integer
    Dim syn_ini As Integer, syn_fit As Integer
    
    Dim ParamArrFromMosParamTableList
    ParamArrFromMosParamTableList = Range(MosParamList.[a2], MosParamList.[g1000].End(xlUp))
    
    For i = 1 To UBound(ParamArrFromMosParamTableList)
        If IsNumeric(ParamArrFromMosParamTableList(i, 7)) Then
            If ParamArrFromMosParamTableList(i, 3) = "process" Then
                process_ini = process_ini + 1
            ElseIf ParamArrFromMosParamTableList(i, 3) = "syn" Then
                syn_ini = syn_ini + 1
            ElseIf ParamArrFromMosParamTableList(i, 3) = "fitting" Or ParamArrFromMosParamTableList(i, 3) = "dio_fitting" Then
                fitting_ini = fitting_ini + 1
            ElseIf ParamArrFromMosParamTableList(i, 3) = "fixed" Or ParamArrFromMosParamTableList(i, 3) = "dio_fixed" Then
                fixed_ini = fixed_ini + 1
            End If
        End If
    Next
    totalparamcnt_ini = process_ini + syn_ini + fitting_ini + fixed_ini
    
    For i = 1 To UBound(ModelParamArr)
    '''If ModelParamArr(i, 1) = "deltawcv" Then MsgBox "1"
        If ModelParamArr(i, 4) = "process" Then
            process_fit = process_fit + 1
        ElseIf ModelParamArr(i, 4) = "syn" Then
            syn_fit = syn_fit + 1
        ElseIf ModelParamArr(i, 4) = "fitting" Or ModelParamArr(i, 4) = "dio_fitting" Then
            fitting_fit = fitting_fit + 1
        ElseIf ModelParamArr(i, 4) = "fixed" Or ModelParamArr(i, 4) = "dio_fixed" Then
            fixed_fit = fixed_fit + 1
        End If
    Next
    totalparamcnt_fit = process_fit + syn_fit + fitting_fit + fixed_fit
    
    With CompareReportSht
        .Activate
        rng.Select
        Selection.Insert Shift:=xlDown
        .Cells(4, col) = "Total"
        .Cells(5, col) = "process"
        .Cells(6, col) = "syn"
        .Cells(7, col) = "fitting"
        .Cells(8, col) = "fixed"
        .Cells(3, col + 1) = "InitialModel"
        .Cells(3, col + 2) = "FittingModel"
        
        .Cells(4, col + 1) = totalparamcnt_ini
        .Cells(4, col + 2) = totalparamcnt_fit
        
        .Cells(5, col + 1) = process_ini
        .Cells(5, col + 2) = process_fit
        
        .Cells(6, col + 1) = syn_ini
        .Cells(6, col + 2) = syn_fit
        
        .Cells(7, col + 1) = fitting_ini
        .Cells(7, col + 2) = fitting_fit
        
        .Cells(8, col + 1) = fixed_ini
        .Cells(8, col + 2) = fixed_fit
        
        j = 9
        For i = 1 To NormalParamArrCnt
            If ParamArrTable(i, 1) <> "" And ParamArrTable(i, 4) = "" And IsNumeric(ParamArrTable(i, 3)) Then
                .Range(.Cells(j, col), .Cells(j, col + 2)).Insert Shift:=xlDown
                .Cells(j, col) = "NotInFittingButInInitial"
                .Cells(j, col + 1) = ParamArrTable(i, 1)
                .Cells(j, col + 2) = ParamArrTable(i, 2)
                j = j + 1
            End If
        Next
        
        For i = 1 To UBound(ModelParamArr)
            If ModelParamArr(i, 4) = "NotINList" Then
                .Range(.Cells(j, col), .Cells(j, col + 2)).Insert Shift:=xlDown
                .Cells(j, col) = "NotInInitialButInFitting"
                .Cells(j, col + 1) = ModelParamArr(i, 1)
                .Cells(j, col + 2) = ModelParamArr(i, 4)
                j = j + 1
            ElseIf ModelParamArr(i, 4) <> "NotINList" And ModelParamArr(i, 5) = "na" Then
                .Range(.Cells(j, col), .Cells(j, col + 2)).Insert Shift:=xlDown
                .Cells(j, col) = "NotInInitialButInFitting"
                .Cells(j, col + 1) = ModelParamArr(i, 1)
                .Cells(j, col + 2) = ModelParamArr(i, 4)
                j = j + 1
            End If
        Next
        
    
    End With
    
    
End Sub

Sub oldfittingvsinitial_CheckFittingModelParamWithTableList(ParamStr As String, WS As Worksheet, P As Long, col As Integer, ParamListSht As Worksheet)

    On Error Resume Next
    Dim Arr
    Dim rng As Range
    P = 2
    With WS
        rA = .Cells(.Rows.Count, col1).End(3).Row
        For i = 1 To rA
            If Left(.Cells(i, col1), 1) = "+" Then
                StrByRow = ParamSplitChar(Right(.Cells(i, col1), Len(.Cells(i, col1)) - 1))
                Arr = Split(Replace(StrByRow, Chr(13), ""), "??")
                For j = 0 To UBound(Arr)
                    If Arr(j) <> "" Then
                        .Cells(P, 3) = Trim(Arr(j))
                        .Cells(P, 5) = Trim(Split(Arr(j), "=")(0))
                        P = P + 1
                    End If
                Next
            ElseIf Left(.Cells(i, col1), 1) = "." Then
                .Cells(P, 3) = Trim(.Cells(i, col1))
                .Cells(P, 5) = Trim(.Cells(i, col1))
                P = P + 1
            End If
        Next
        
        rb = .Cells(.Rows.Count, col2).End(3).Row
        For i = 1 To rb
            If Left(.Cells(i, col2), 1) = "+" Then
                StrByRow = ParamSplitChar(Right(.Cells(i, col2), Len(.Cells(i, col2)) - 1))
                Arr = Split(Replace(StrByRow, Chr(13), ""), "??")
                For j = 0 To UBound(Arr)
                    If Arr(j) <> "" Then
                        Set rng = Nothing
                        Set rng = .Range(.Cells(1, 5), .Cells(.Cells(.Rows.Count, 5).End(3).Row, 5)).Find(Trim(Split(Arr(j), "=")(0)), , , xlWhole)
                        If Not rng Is Nothing Then
                            .Cells(rng.Row, 4) = Trim(Arr(j))
                            Q = rng.Row + 1
                        Else
                            .Range(.Cells(Q, 3), .Cells(Q, 5)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                            .Cells(Q, 4) = Trim(Arr(j))
                        End If
                    End If
                Next
            ElseIf Left(.Cells(i, col2), 1) = "." Then
                Set rng = Nothing
                Set rng = .Range(.Cells(1, 5), .Cells(.Cells(.Rows.Count, 5).End(3).Row, 5)).Find(Trim(.Cells(i, col2)), , , xlWhole)
                If Not rng Is Nothing Then
                    .Cells(rng.Row, 4) = Trim(.Cells(i, col2))
                    Q = rng.Row + 1
                Else
                    .Range(.Cells(Q, 3), .Cells(Q, 5)).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
                    .Cells(Q, 4) = Trim(.Cells(i, col2))
                End If
            End If
        Next
        .Columns(5).Delete
        SetParam
'        SetParamColorSample .Cells(2, 7)
        [c1] = [a1]
        [d1] = [b1]
        [e1] = "ParameterType"
        [f1] = "DefectDescription"
        RangeFormat .Range("C1:F1")
        
        Dim sParam As String
        Dim ParamValue, ParamValue1, ParamValue2
        Dim ParamArrOrder As Integer
        
       
        For i = 2 To .UsedRange.Rows.Count
            sParam = ""
            ParamValue = 0
            ParamValue1 = 0
            ParamValue2 = 0
            Set rng = Nothing
            ParamArrOrder = 0
            If .Cells(i, 4) = "" Then
                Set rng = .Cells(i, 3)
            Else
                Set rng = .Cells(i, 4)
            End If
            sParam = LCase(Trim(Split(rng, "=")(0)))
            ParamValue = Trim(Split(rng, "=")(1)) * 1
            ParamValue1 = Trim(Split(.Cells(i, 3), "=")(1)) * 1
            ParamValue2 = Trim(Split(.Cells(i, 4), "=")(1)) * 1
            ParamArrOrder = Application.WorksheetFunction.Match(sParam, Application.Index(ParamArr, , 1), 0)
            If ParamArrOrder = 0 Then ParamArrOrder = 1
            If .Cells(i, 3) <> .Cells(i, 4) Then
                If .Cells(i, 3) <> "" And .Cells(i, 4) <> "" Then
                    If Trim(Split(.Cells(i, 3), "=")(1)) * 1 <> Trim(Split(.Cells(i, 4), "=")(1)) * 1 Then
                        .Cells(i, 3).Interior.Color = ParamArr(ParamArrOrder, 2)
                        .Cells(i, 4).Interior.Color = ParamArr(ParamArrOrder, 2)
                        .Cells(i, 5) = ParamArr(ParamArrOrder, 3)
                        .Cells(i, 6) = "ValueIsDifferent"
                    End If
                Else
'                    ListDifferentParam WS, .Cells(i, 3), .Cells(i, 4)
                    .Cells(i, 3).Interior.Color = ParamArr(ParamArrOrder, 2)
                    .Cells(i, 4).Interior.Color = ParamArr(ParamArrOrder, 2)
                    .Cells(i, 5) = ParamArr(ParamArrOrder, 3)
                    .Cells(i, 6) = "ParameterLack"
                End If
            End If
            
            If InStr(1, ParamArr(ParamArrOrder, 3), "fit") > 0 Then
                If IsNumeric(ParamArr(ParamArrOrder, 5)) Then
                    If Application.Min(ParamValue, ParamValue1, ParamValue2) < ParamArr(ParamArrOrder, 5) * 1 Then
                        .Cells(i, 3).Interior.Color = ParamArr(ParamArrOrder, 2)
                        .Cells(i, 4).Interior.Color = ParamArr(ParamArrOrder, 2)
                        .Cells(i, 5) = ParamArr(ParamArrOrder, 3)
                        .Cells(i, 6) = "OverLowerBound"
                        .Cells(i, 6).Interior.ColorIndex = 3
                    End If
                End If
                
                If IsNumeric(ParamArr(ParamArrOrder, 6)) Then
                    If Application.Max(ParamValue, ParamValue1, ParamValue2) > ParamArr(ParamArrOrder, 6) * 1 Then
                        .Cells(i, 3).Interior.Color = ParamArr(ParamArrOrder, 2)
                        .Cells(i, 4).Interior.Color = ParamArr(ParamArrOrder, 2)
                        .Cells(i, 5) = ParamArr(ParamArrOrder, 3)
                        .Cells(i, 6) = "OverUpperBound"
                        .Cells(i, 6).Interior.ColorIndex = 3
                    End If
                End If
            End If
        Next
        
'        p = 2
'        q = 2
'        u = 2
'        For i = 1 To .Cells(.Rows.Count, 6).End(3).Row
'            If .Cells(i, 6) <> "" Then
'                If .Cells(i, 6) = "Fix" Or .Cells(i, 6) = "Process" Or .Cells(i, 6) = "Syn" Then
'                    .Cells(p, 8) = .Cells(i, 3)
'                    .Cells(p, 8).Interior.ColorIndex = .Cells(i, 5)
'                    .Cells(p, 10) = .Cells(i, 6)
'                    .Cells(p, 9) = .Cells(i, 4)
'                    .Cells(p, 9).Interior.ColorIndex = .Cells(i, 5)
'                    p = p + 1
'                ElseIf .Cells(i, 6) = "Fitting" Then
'                    .Cells(q, 11) = .Cells(i, 3)
'                    .Cells(q, 11).Interior.ColorIndex = .Cells(i, 5)
'                    .Cells(q, 13) = .Cells(i, 6)
'                    .Cells(q, 12) = .Cells(i, 4)
'                    .Cells(q, 12).Interior.ColorIndex = .Cells(i, 5)
'                    q = q + 1
'                ElseIf .Cells(i, 6) = "Not Found" Or .Cells(i, 6) = "NA" Then
'                    .Cells(u, 14) = .Cells(i, 3)
'                    .Cells(u, 14).Interior.ColorIndex = .Cells(i, 5)
'                    .Cells(u, 16) = .Cells(i, 6)
'                    .Cells(u, 15) = .Cells(i, 4)
'                    .Cells(u, 15).Interior.ColorIndex = .Cells(i, 5)
'                    u = u + 1
'                End If
'            End If
'        Next
        .Sort.SortFields.Clear
        .Sort.SortFields.Add Key:=Range("E1"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With .Sort
            .SetRange Range("C2:F" & i)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        .Columns(1).Delete
        .Columns(1).Delete
        .Rows((.Cells(.Rows.Count, 3).End(3).Row + 1) & ":2000").Delete

        .Columns.AutoFit
    End With
End Sub

Sub ListDifferentParam(WS As Worksheet, rng1 As Range, rng2 As Range)
    Dim sParam As String
    Dim ParamArrOrder As Integer
    On Error Resume Next
    Dim rng As Range
    sParam = ""
    If rng1 <> "" Then
        Set rng = rng1
        sParam = UCase(Trim(Split(rng1, "=")(0)))
    ElseIf rng2 <> "" Then
        Set rng = rng2
        sParam = UCase(Trim(Split(rng2, "=")(0)))
    End If
    ParamArrOrder = Application.WorksheetFunction.Match(sParam, Application.Index(ParamArr, , 1), 0)
    If ParamArrOrder > 0 Then
        rng1.Interior.ColorIndex = ParamArr(ParamArrOrder, 2)
        rng1.Offset(0, 2) = ParamArr(ParamArrOrder, 3)
        rng1.Offset(0, 3) = ParamArr(ParamArrOrder, 2)
        rng2.Interior.ColorIndex = ParamArr(ParamArrOrder, 3)
    ElseIf ParamArrOrder = 0 Then
        rng1.Interior.ColorIndex = 26
        rng1.Offset(0, 3) = "Not Found"
        rng1.Offset(0, 2) = 26
        rng2.Interior.ColorIndex = 26
    End If
  
End Sub





